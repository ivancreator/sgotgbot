import tempfile
from bot import dp, bot
from aiogram import types
from aiogram.dispatcher.storage import FSMContext
from filters import Main, IsOwner
from handlers.client.callback_query.add import account_add
from states import addAccount, selectAccount
from utils.db import db
from callbacks import cb_account
from functions import getAnnouncements, accountsCheck, accountMenu, ns_sessions, accountLogin
from urllib.parse import unquote
from utils.db.data import Account

@dp.callback_query_handler(Main(), cb_account.filter(action='select'), state=selectAccount.select)
async def accountSelect(call: types.CallbackQuery, callback_data: dict):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîê –í–æ–π—Ç–∏", callback_data=cb_account.new(action='select_confirm', value=callback_data['value'])))
    markup.add(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=cb_account.new(action='remove', value=callback_data['value'])))
    markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=cb_account.new(action='list', value='')))
    await call.answer()
    await call.message.edit_text("‚ú¥Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

@dp.callback_query_handler(Main(), cb_account.filter(action='remove'), state=[selectAccount.select, selectAccount.menu])
async def accountRemove(call: types.CallbackQuery(), callback_data: dict, state: FSMContext):
    account_id = int(callback_data['value'])
    data = await state.get_data()
    try:
        ns = ns_sessions[account_id]
        await ns.logout()
        await ns._client.aclose()
        del ns_sessions[account_id]
    finally:
        await db.execute("DELETE FROM accounts WHERE id = %s", [account_id])
        await call.answer("üóë –£—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        await accountsCheck(data['usermsg'], state)
        await call.message.delete()

@dp.callback_query_handler(Main(), cb_account.filter(action='list'), state=['*', selectAccount.select])
async def accountsList(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    data = await state.get_data()
    await call.answer()
    await accountsCheck(data['usermsg'], state)
    await call.message.delete()

@dp.callback_query_handler(Main(), cb_account.filter(action='select_confirm'), state=selectAccount.select)
async def accountselectConfirm(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    account_id = int(callback_data['value'])
    account = await db.execute("SELECT telegram_id FROM accounts WHERE id = %s", [account_id])
    if call.from_user.id == account['telegram_id']:
        await call.answer()
        await call.message.edit_text("üïê –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ —É—á—ë—Ç–Ω—É—é –∑–∞–ø–∏—Å—å")
        try:
            await accountLogin(account_id, message=call.message)
        except Exception as e:
            raise e
        else:
            ns = ns_sessions[account_id]
            await accountMenu(call.message, state)
            await call.message.delete()
    else:
        await call.answer("‚ö† –≠—Ç–æ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        
@dp.callback_query_handler(Main(), cb_account.filter(action='get_file'), state=['*'])
async def getAttachments(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    try:
        await call.answer()
        file_msg = await call.message.answer("üïê –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
        active_accounts = await Account.get_activeAccounts(call.from_user.id)
        for account in active_accounts:
            account_id = account['id']
            ns = ns_sessions[account_id]
            await file_msg.edit_text("üîç –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            attachments = [announcement async for announcement in getAnnouncements(ns) for attachment in announcement['attachments'] if attachment['id'] == int(callback_data['value'])][0]['attachments']
            for attachment in attachments:
                if attachment['id'] == int(callback_data['value']):
                    try:
                        await file_msg.edit_text("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                        response = await ns._request_with_optional_relogin("attachments/"+str(attachment['id']))
                        filename = unquote(str(response.headers.get('filename')))
                        with tempfile.TemporaryDirectory() as directory, open("%s/%s" % (directory, filename), "wb") as file:
                            file.write(response.content)
                            await file_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                            await call.message.answer_document(document=types.InputFile("%s/%s" % (directory, filename)))
                            await file_msg.delete()
                    except Exception as e:
                        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: "+str(e))
                        print("–ê—Ä–≥—É–º–µ–Ω—Ç—ã: "+str(e.args))
                        raise e
    except (TypeError, KeyError) as e:
        await file_msg.edit_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á—ë—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
    except IndexError as e:
        await file_msg.edit_text("üìë –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: "+ str(e))
        await file_msg.edit_text("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        raise e