from aiogram.dispatcher.filters import state
from aiogram.types.callback_query import CallbackQuery
from netschoolapi import NetSchoolAPI, errors
from netschoolapi.data import Announcement
from bot import dp, bot
from aiogram import types
from aiogram.dispatcher.storage import FSMContext
from filters import Main, IsOwner
from functions.client import cidSelect, sidSelect, pidSelect, cnSelect, sftSelect, scidSelect, getloginState
from states import addAccount, selectAccount
import states
from utils.db import InitDb
from aiogram.utils.callback_data import CallbackData
from callbacks import cb_account
import httpx, typing
from functions import getAnnouncements, accountsCheck, accountMenu, ns_sessions, accountLogin
from os import remove, path
from urllib.parse import unquote

@dp.callback_query_handler(Main(), cb_account.filter(action='account_select'), state=selectAccount.select)
async def accountSelect(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîê –í–æ–π—Ç–∏", callback_data=cb_account.new(action='account_selectConfirm', value=callback_data['value'])))
    markup.add(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=cb_account.new(action='account_remove', value=callback_data['value'])))
    markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=cb_account.new(action='account_selectConfirm', value='')))
    await call.answer()
    await call.message.edit_text("‚ú¥Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

@dp.callback_query_handler(Main(), cb_account.filter(action='account_remove'), state=[selectAccount.select, selectAccount.menu])
async def accountRemove(call: types.CallbackQuery(), callback_data: dict, state: FSMContext):
    db = InitDb()
    data = await state.get_data()
    await db.execute(f"DELETE FROM accounts WHERE id = {callback_data['value']}")
    await call.answer("üóë –£—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
    await accountsCheck(data['usermsg'], state)
    await call.message.delete()

@dp.callback_query_handler(Main(), cb_account.filter(action='account_selectConfirm'), state=selectAccount.select)
async def accountselectConfirm(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    account_id = callback_data['value']
    if account_id:
        db = InitDb()
        account_tg_id = await db.execute("SELECT telegram_id FROM accounts WHERE id = %s", [account_id])
        if account_tg_id[0] == call.from_user.id:
            await call.answer()
            await call.message.edit_text("üïê –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ —É—á—ë—Ç–Ω—É—é –∑–∞–ø–∏—Å—å")
            account = await db.execute("SELECT * FROM accounts WHERE id = %s", [account_id])
            try:
                await accountLogin(call.message, call.from_user.id, account[10], account[8], account[9], account[2], account[3], account[4], account[5], account[6], account[7])
            except Exception as e:
                raise e
            else:
                await db.execute("UPDATE accounts SET status = 'active' WHERE id = %s", [account_id])
                ns = ns_sessions[account_tg_id[0]]
                await accountMenu(call.message, state, ns)
        else:
            await call.answer("‚ö† –≠—Ç–æ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    else:
        data = await state.get_data()
        await call.answer()
        await accountsCheck(data['usermsg'], state)
        await call.message.delete()
        
@dp.callback_query_handler(Main(), cb_account.filter(action='getFile'), state=['*'])
async def getAttachments(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    try:
        await call.answer()
        file_msg = await call.message.answer("üïê –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
        db = InitDb()
        account = await db.execute("SELECT * FROM accounts WHERE telegram_id = %s AND status = 'active'", [call.from_user.id])
        ns = ns_sessions[call.from_user.id]
        await file_msg.edit_text("üîç –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        attachments = [announcement async for announcement in getAnnouncements(ns) for attachment in announcement['attachments'] if attachment['id'] == int(callback_data['value'])][0]['attachments']
        for attachment in attachments:
            if attachment['id'] == int(callback_data['value']):
                try:
                    await file_msg.edit_text("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                    response = await ns._client.get("attachments/"+str(attachment['id']))
                    filename = unquote(str(response.headers.get('filename')))
                    file = open(filename, "wb")
                    file.write(response.content)
                    file.close()
                    await file_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                    await call.message.answer_document(document=types.InputFile(filename))
                    await file_msg.delete()
                    remove(path.abspath(attachment['name']))
                except Exception as e:
                    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: "+str(e))
                    print("–ê—Ä–≥—É–º–µ–Ω—Ç—ã: "+str(e.args))
                    raise Exception("Unknown exception").with_traceback(e)
    except TypeError as e:
        await file_msg.edit_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á—ë—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
    except IndexError as e:
        await file_msg.edit_text("üìë –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: "+ str(e))
        await file_msg.edit_text("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")