from aiogram import types
from aiogram.dispatcher.storage import FSMContext
from bot import dp, bot
from utils.db import db, User
from filters import IsOwner, Main, userAdd
from states import addAccount
from functions import cidSelect, ns_sessions
from netschoolapi import NetSchoolAPI
import httpx

from utils.db.data import Account

@dp.message_handler(Main(), content_types=["location"], state=addAccount.wait_geo)
async def test(message: types.Message, state: FSMContext):
    nmessage = await bot.send_message(message.chat.id, "üïê –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
    data = await state.get_data()
    old_message = data["message"]
    await old_message.delete()
    await message.delete()
    response = httpx.get("https://nominatim.openstreetmap.org/reverse?format=json&lat="+str(
        message.location.latitude)+"&lon="+str(message.location.longitude))
    if response.status_code == 200:
        result = response.json()
        try:
            city = result["address"]["city"]
        except KeyError as e:
            await nmessage.edit_text("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–≥–∏–æ–Ω")
        except Exception as e:
            print("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            raise e
        await nmessage.edit_text("üïê –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ("+city+")")
        region = await db.execute("SELECT * FROM regions WHERE display_name = %s", [city])
        if region:
            account_id = await Account.add(message.from_user.id, region[0])
            await addAccount.cid.set()
            ns_sessions[account_id] = NetSchoolAPI(region[0])
            await cidSelect(account_id, nmessage)
        else:
            await nmessage.edit_text("‚ö† –í–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\nüìé –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –°–ì–û")
            await addAccount.wait_url.set()
    else:
        await nmessage.edit_text("‚ùå –ü—Ä–æ–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –º–µ—Ç—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        await state.finish()