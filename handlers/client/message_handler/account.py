from typing import final
from bot import dp, bot
from aiogram import types
from filters import Main
from aiogram.dispatcher import FSMContext
from functions.anti_flood import anti_flood
from states import selectAccount
from functions.client import sendAnnouncements, accountsList
from functions.sgo import AnnouncementsError, add_checkThread, checkNew, ns_sessions
from netschoolapi import NetSchoolAPI
from utils.db.data import Account, db

@dp.message_handler(Main(), text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π", state=selectAccount.menu)
@dp.throttled(anti_flood, rate=3)
async def announcements(message: types.Message, state: FSMContext):
    wait_message = await message.answer("üïê –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
    await message.delete()
    accounts = await Account.get_activeAccounts(message.from_user.id)
    account = accounts[0]
    account_id = account['id']
    ns = ns_sessions[account_id]
    try:
        await sendAnnouncements(message, ns, state)
    except AnnouncementsError:
        await message.answer("üìã –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—É—Å—Ç")
    await wait_message.delete()

@dp.message_handler(Main(), text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", state=selectAccount.menu)
@dp.throttled(anti_flood, rate=3)
async def setting(message: types.Message, state: FSMContext):
    accounts = await Account.get_activeAccounts(message.from_user.id)
    account = accounts[0]
    account_id = account['id']
    if account['alert']:
        await db.execute("UPDATE accounts SET alert = False WHERE id = %s", [account_id])
        await message.answer("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    else:
        ns = ns_sessions[account_id]
        await db.execute("UPDATE accounts SET alert = True WHERE id = %s ", [account_id])
        await message.answer("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
        await add_checkThread(account_id, ns)
    await message.delete()

@dp.message_handler(Main(), text="üö™ –í—ã—Ö–æ–¥", state=selectAccount.menu)
async def exit(message: types.Message, state: FSMContext):
    exit_msg = await message.answer("üö™ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—ã—Ö–æ–¥ –∏–∑ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏")
    await message.delete()
    accounts = await Account.get_activeAccounts(message.from_user.id)
    account = accounts[0]
    account_id = account['id']
    await Account.logout(account_id)
    data = await state.get_data()
    await data['message'].delete()
    await accountsList(message, state)
    try:
        await exit_msg.edit_text("üïê –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥")
        ns = ns_sessions[account_id]
        await ns.logout()
        await ns._client.aclose()
        del ns_sessions[account_id]
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏: %s" % e)
        await exit_msg.edit_text("‚ùó –í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏")
    else:
        await exit_msg.delete()
