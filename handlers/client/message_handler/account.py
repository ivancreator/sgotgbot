from bot import dp, bot
from aiogram import types
from filters import Main
from aiogram.dispatcher import FSMContext
from functions.anti_flood import anti_flood
from states import selectAccount
from functions.client import sendAnnouncements, accountsList
from functions.sgo import add_checkThread, checkNew, ns_sessions
from netschoolapi import NetSchoolAPI
from utils.db.database import InitDb

@dp.message_handler(Main(), text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π", state=selectAccount.menu)
@dp.throttled(anti_flood, rate=3)
async def announcements(message: types.Message, state: FSMContext):
    wait_message = await message.answer("üïê –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
    await message.delete()
    ns = ns_sessions[message.from_user.id]
    await sendAnnouncements(message, ns, state)
    await wait_message.delete()

@dp.message_handler(Main(), text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", state=selectAccount.menu)
@dp.throttled(anti_flood, rate=3)
async def setting(message: types.Message, state: FSMContext):
    db = InitDb()
    account = await db.execute("SELECT * FROM accounts WHERE telegram_id = %s AND status = 'active'", [message.from_user.id])
    if account[16]:
        await db.execute("UPDATE accounts SET alert = False WHERE telegram_id = %s AND status = 'active'", [message.from_user.id])
        await message.answer("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    else:
        ns = ns_sessions[message.from_user.id]
        await db.execute("UPDATE accounts SET alert = True, chat_id = %s WHERE telegram_id = %s AND status = 'active'", [message.chat.id, message.from_user.id])
        await message.answer("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
        await add_checkThread(message.from_user.id, message.chat.id, ns)
    await message.delete()

@dp.message_handler(Main(), text="üö™ –í—ã—Ö–æ–¥", state=selectAccount.menu)
async def exit(message: types.Message, state: FSMContext):
    exit_msg = await message.answer("üö™ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—ã—Ö–æ–¥ –∏–∑ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏")
    await message.delete()
    db = InitDb()
    account_id = await db.execute("SELECT id FROM accounts WHERE telegram_id = %s AND status = 'active'", [message.from_user.id])
    await db.execute("UPDATE accounts SET status = 'inactive', alert = False WHERE id = %s", [account_id])
    data = await state.get_data()
    ns = ns_sessions[message.from_user.id]
    await exit_msg.edit_text("üïê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥")
    await accountsList(message, state)
    await ns.logout()
    del ns_sessions[message.from_user.id]
    await data['message'].delete()
    await exit_msg.delete()
