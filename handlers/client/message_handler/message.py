from aiogram import types
from aiogram.types.message import ParseMode
from bot import dp
from handlers.client.callback_query.add import nsSelect
from utils.db import db, User, Account
from filters import Main, IsLink, userAdd
# from handlers.client.callback_query import add, schooltypeSelect
from aiogram.dispatcher.storage import FSMContext
from states import addAccount, selectAccount
from netschoolapi import NetSchoolAPI, errors
from callbacks import cb_account
from functions import cidSelect, getAnnouncements, accountsCheck, accountAdd, accountMenu, ns_sessions
import httpx

@dp.message_handler(Main(), commands="start", state="*")
async def start(message: types.Message, state: FSMContext):
    user = await User.data(message.from_user.id)
    if not user:
        await userAdd(message)
        user = await User.data(message.from_user.id)
    if not user[7]:
        await message.answer('üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –°–µ—Ç–µ–≤–æ–≥–æ –ì–æ—Ä–æ–¥–∞. –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ. –≠—Ç–æ –±–æ—Ç "–°–µ—Ç–µ–≤–æ–π –ì–æ—Ä–æ–¥. –û–±—ä—è–≤–ª–µ–Ω–∏—è"\n\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–π –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –∫–æ–º–ø–∞–Ω–∏–∏ –ò—Ä–¢–µ—Ö –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –¥–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.\n\nüëâ –î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è\nüì¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é\nüõé –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö –∫ –Ω–∏–º —Ñ–∞–π–ª–æ–≤\n\nüõ° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É "–°–µ—Ç–µ–≤–æ–π –ì–æ—Ä–æ–¥. –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ" –ø–æ–¥ —Å–≤–æ–µ–π —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é')
        await db.execute(f"UPDATE users SET welcome_message = True WHERE telegram_id = {message.from_user.id}")
        await message.delete()
    await accountsCheck(message, state)

@dp.message_handler(commands="account_add")
async def accountaddCall(message: types.Message):
    await accountAdd(message)

@dp.message_handler(Main(), state=addAccount.wait_url)
async def userConnect(message: types.Message, state: FSMContext):
    ns = NetSchoolAPI(str(message.text))
    url = ns._url
    try:
        response = httpx.get(url, verify=False)
        if response.status_code == 200:
            data = await state.get_data()
            bemessage = data["message"]
            await message.delete()
            ns_sessions[message.from_user.id] = ns
            await addAccount.cid.set()
            await cidSelect(message.from_user.id, bemessage, state)
        else:
            await message.reply("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ ("+str(response.status_code)+")")
    except httpx.UnsupportedProtocol:
        await message.reply("–ù–µ –≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –≤–≤–µ–¥—ë–Ω –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª. (–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è https:// –∏ http://)")
    except httpx.RequestError:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
    except Exception as e:
        await message.reply("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞")
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ {url}")

@dp.message_handler(Main(), text='‚ùå –û—Ç–º–µ–Ω–∞', state=addAccount.wait_geo)
async def cancelGeo(message: types.Message, state: FSMContext):
    await message.delete()
    msg = await message.answer("üïê –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
    data = await state.get_data()
    await data['message'].delete()
    await nsSelect(msg)
    await addAccount.url.set()

@dp.message_handler(state=addAccount.login)
async def getLogin(message: types.Message, state: FSMContext):
    data = await state.get_data()
    msg = data["message"]
    await msg.edit_text("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
    await state.update_data(login=str(message.text))
    await message.delete()
    await addAccount.password.set()

async def add(message: types.Message, state: FSMContext, fail: str = None):
    data = await state.get_data()
    markup = types.InlineKeyboardMarkup()
    # markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è",
    #            callback_data=cb_account.new(action='select_sft', value=data['sft'])))
    if fail == "AuthError":
        await message.edit_text("‚ùóÔ∏è –ù–µ –≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\nüë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=markup)
    elif fail == "UnknownError":
        await message.edit_text("‚ùóÔ∏è –í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=markup)
        await state.reset_state(with_data=True)
    else:
        await message.edit_text("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=markup)
    async with state.proxy() as data:
        data["message"] = message
    await addAccount.login.set()

async def checkData(message: types.Message, msg, state):
    data = await state.get_data()
    ns = ns_sessions[message.from_user.id]
    response = await ns._client.get("schools/" +
                         str(data['scid'])+"/card")
    if response.status_code == 200:
        await msg.edit_text("üïê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        school_name = str(response.json()["commonInfo"]["schoolName"])
        try:
            await ns.login(data['login'], data['password'], data['cid'], data['sid'], data['pid'], data['cn'], data['sft'], data['scid'])
            init = await ns._request_with_optional_relogin('student/diary/init')
            nickname = str(init.json()['students'][0]['nickName'])
            display_name = nickname + " ("+ school_name +")"
            account = await Account.add(message.from_user.id, data['cid'], data['sid'], data['pid'], data['cn'], data['sft'], data['scid'], data['login'], data['password'], ns._url, display_name)
            await db.execute("UPDATE accounts SET status = 'active' WHERE id = %s", [account[0]])
            await state.reset_state(with_data=True)
            account = await db.execute(f"SELECT * FROM accounts WHERE telegram_id = {message.from_user.id}")
            await selectAccount.menu.set()
            await accountMenu(msg, state, account[0])
        except errors.AuthError as e:
            await msg.edit_text("‚ö† "+str(e))
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –°–ì–û: " + str(e))
            await msg.edit_text("‚ùóÔ∏è –í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")

@dp.message_handler(state=addAccount.password)
async def getPassword(message: types.Message, state: FSMContext):
    await state.update_data(password=message.text)
    data = await state.get_data()
    await message.delete()
    await checkData(message, data["message"], state)
